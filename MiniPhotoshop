from PIL import Image, ImageEnhance, ImageFilter
from random import choice
from PyQt5.QtWidgets import QAction, QMainWindow, QFileDialog, QLabel
from PyQt5.QtWidgets import QInputDialog
from PyQt5.QtGui import QPixmap
import sys


class MiniPhotoshop(QMainWindow):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        TITLLE = "Mini Photoshop"
        TOP = 0  # Координаты левого верхнего угла
        LEFT = 0
        WIDTH = 1920  # Размеры окна
        HEIGHT = 1080

        self.setWindowTitle(TITLLE)
        self.setGeometry(TOP, LEFT, WIDTH, HEIGHT)

        self.image = QLabel(self)
        self.image.move(0, 0)
        self.image.resize(1920, 1080)

        mainMenu = self.menuBar()
        effects = mainMenu.addMenu("Эффекты")
        rotate = mainMenu.addMenu("Развернуть")
        file = mainMenu.addMenu("Файл")

        image = QAction("Выбрать Картинку", self)
        file.addAction(image)
        image.triggered.connect(self.imagge)

        right = QAction("На право", self)
        rotate.addAction(right)
        right.triggered.connect(self.rightt)

        left = QAction("На лево", self)
        rotate.addAction(left)
        left.triggered.connect(self.leftt)

        tint_grey = QAction("Оттенки серого", self)
        effects.addAction(tint_grey)
        tint_grey.triggered.connect(self.tintgrey)

        negative = QAction("Негатив", self)
        effects.addAction(negative)
        negative.triggered.connect(self.neg)

        add_noise = QAction("Добавление шумов", self)
        effects.addAction(add_noise)
        add_noise.triggered.connect(self.addnoise)

        brightness = QAction("Яркость", self)
        effects.addAction(brightness)
        brightness.triggered.connect(self.brightnesss)

        white_black = QAction("Чёрно — белое", self)
        effects.addAction(white_black)
        white_black.triggered.connect(self.whiteblack)

        saturation = QAction("Усиление насыщенности", self)
        effects.addAction(saturation)
        saturation.triggered.connect(self.saturationn)

        edges = QAction("Контур Изображения", self)
        effects.addAction(edges)
        edges.triggered.connect(self.edgess)

        blur = QAction("Размыть", self)
        effects.addAction(blur)
        blur.triggered.connect(self.blurr)

    def tintgrey(self):
        for i in range(self.x):
            for j in range(self.y):
                r1, g1, b1 = self.pix[i, j]
                S = (r1 + g1 + b1) // 3
                self.pix[i, j] = S, S, S

        self.imagee.save('tintgrey.jpg')
        self.pixmap = QPixmap('tintgrey.jpg')
        self.image.setPixmap(self.pixmap)

    def neg(self):
        for i in range(self.x):
            for j in range(self.y):
                r1, g1, b1 = self.pix[i, j]
                self.pix[i, j] = 255 - r1, 255 - g1, 255 - b1

        self.imagee.save('tintgrey.jpg')
        self.pixmap = QPixmap('tintgrey.jpg')
        self.image.setPixmap(self.pixmap)

    def addnoise(self):
        addnoise_k, okBtnPressed = QInputDialog.getInt(self, "Введите коэф",
                                                          'Введите',
                                                          20)
        f = [i for i in range(-(addnoise_k), addnoise_k)]
        for i in range(self.x):
            for j in range(self.y):
                rand = choice(f)
                r1 = self.pix[i, j][0] + rand
                g1 = self.pix[i, j][1] + rand
                b1 = self.pix[i, j][2] + rand
                if (r1 < 0):
                    r1 = 0
                if (g1 < 0):
                    g1 = 0
                if (b1 < 0):
                    b1 = 0
                if (r1 > 255):
                    r1 = 255
                if (g1 > 255):
                    g1 = 255
                if (b1 > 255):
                    b1 = 255
                self.pix[i, j] = r1, g1, b1

        self.imagee.save('addnoise.jpg')
        self.pixmap = QPixmap('addnoise.jpg')
        self.image.setPixmap(self.pixmap)

    def brightnesss(self):
        brightnesss_k, okBtnPressed = QInputDialog.getInt(self, "Введите яркость",
                                                          'Введите',
                                                          20)
        # brightnesss_k = 10

        for i in range(self.x):
            for j in range(self.y):
                r1, g1, b1 = self.pix[i, j]
                r1 += brightnesss_k
                g1 += brightnesss_k
                b1 += brightnesss_k
                if r1 < 0:
                    r1 = 0
                if g1 < 0:
                    g1 = 0
                if b1 < 0:
                    b1 = 0
                if r1 > 255:
                    r1 = 255
                if g1 > 255:
                    g1 = 255
                if b1 > 255:
                    b1 = 255
                self.pix[i, j] = r1, g1, b1

        self.imagee.save('brightness.jpg')
        self.pixmap = QPixmap('brightness.jpg')
        self.image.setPixmap(self.pixmap)

    def whiteblack(self):
        whiteblack_k, okBtnPressed = QInputDialog.getInt(self, "Введите коэф",
                                                         'Введите',
                                                         20)
        print(type(whiteblack_k))
        for i in range(self.x):
            for j in range(self.y):
                r, g, b = self.pix[i, j]
                summ = r + g + b
                if summ > (((255 + whiteblack_k) // 2) * 3):
                    r, g, b = 255, 255, 255
                else:
                    r, g, b = 0, 0, 0

                self.pix[i, j] = r, g, b
        self.imagee.save('whiteblack.jpg')
        self.pixmap = QPixmap('whiteblack.jpg')
        self.image.setPixmap(self.pixmap)

    def saturationn(self):
        saturation_k, okBtnPressed = QInputDialog.getInt(self, "Введите коэф",
                                                         'Введите',
                                                         20)
        converter = ImageEnhance.Color(self.imagee)
        self.imagee = converter.enhance(saturation_k)
        self.imagee.save('saturation.jpg')
        self.pixmap = QPixmap('saturation.jpg')
        self.image.setPixmap(self.pixmap)

    def edgess(self):
        self.imagee = self.imagee.filter(ImageFilter.FIND_EDGES)
        self.imagee.save('edgess.jpg')
        self.pixmap = QPixmap('edgess.jpg')
        self.image.setPixmap(self.pixmap)

    def blurr(self):
        self.imagee = self.imagee.filter(ImageFilter.BLUR)
        self.imagee.save('blurr.jpg')
        self.pixmap = QPixmap('blurr.jpg')
        self.image.setPixmap(self.pixmap)

    def rightt(self):
        self.imagee = self.imagee.transpose(Image.ROTATE_270)
        self.imagee.save('rightt.jpg')
        self.pixmap = QPixmap('rightt.jpg')
        self.image.setPixmap(self.pixmap)

    def leftt(self):
        self.imagee = self.imagee.transpose(Image.ROTATE_90)
        self.imagee.save('leftt.jpg')
        self.pixmap = QPixmap('leftt.jpg')
        self.image.setPixmap(self.pixmap)

    def imagge(self):
        fname = QFileDialog.getOpenFileName(self, 'Выбрать картинку', '')[0]
        # print(fname)
        self.pixmap = QPixmap(fname)
        self.image.setPixmap(self.pixmap)

        self.imagee = Image.open(fname)  # Открываем изображение.
        self.x = self.imagee.size[0]  # Определяем ширину.
        self.y = self.imagee.size[1]  # Определяем высоту.
        self.pix = self.imagee.load()  # Выгружаем значения пикселей
#
#
# if __name__ == '__main__':
#     app = QApplication(sys.argv)
#     ex = MiniPhotoshop()
#     ex.show()
#     sys.exit(app.exec())
